# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        - 名称：下载构建工件
  使用：actions/download-artifact@v2.1.1
  和：
    # 工件名称
    名称：#可选
    # 目标路径
    路径：#可选
- 名称：缓存
  使用：actions/cache@v2.1.8
  和：
    # 要缓存和恢复的文件、目录和通配符模式的列表
    小路：
    # 用于恢复和保存缓存的显式键
    钥匙：
    # 如果键没有发生缓存命中，用于恢复缓存的键的有序列表
    恢复密钥：#可选
    - 名称：设置 Node.js 环境
  使用：actions/setup-node@v2.5.2
  和：
    # 在 npmrc 中设置 always-auth
    always-auth: # 可选，默认为 false
    # 要使用的版本的版本规范。示例：12.x、10.15.1、>=10.15.0
    节点版本：#可选
    # 包含要使用的版本的版本规范的文件。示例：.nvmrc、.node-version
    节点版本文件：#可选
    # Node 使用的目标架构。示例：x86、x64。将默认使用系统架构。
    架构：#可选
    # 如果您希望操作检查满足版本规范的最新可用版本，请设置此选项
    检查最新：#可选
    # 用于设置身份验证的可选注册表。会在项目级别的.npmrc和.yarnrc文件中设置registry，并设置auth从env.NODE_AUTH_TOKEN中读取
    registry-url: # 可选
    # 可选范围用于针对范围注册表进行身份验证
    范围：#可选
    # 用于从节点版本中提取节点分布。由于存在默认值，因此通常不由用户提供。
    token: # 可选，默认为 ${{ github.token }}
    # 用于指定在默认目录中缓存的包管理器。支持的值：npm、yarn、pnpm
    缓存：#可选
    # 用于指定一个依赖文件的路径：package-lock.json、yarn.lock等。支持通配符或文件名列表，用于缓存多个依赖。
    缓存依赖路径：#可选
    # 已弃用。请改用节点版本。2019 年 10 月 1 日后将不再支持
    版本：#可选  - 名称：设置 Go 环境
  使用：actions/setup-go@v4.0.0
  和：
    # 要下载（如果需要）和使用的 Go 版本。支持 semver 规范和范围。
    go-version: # 可选
    # go.mod 或 go.work 文件的路径。
    go-version-file: # 可选
    # 如果您希望操作始终检查满足版本规范的最新可用版本，请将此选项设置为 true
    检查最新：#可选
    # 用于从 go-versions 中拉取节点分布。由于存在默认值，因此通常不由用户提供。在 github.com 上运行此操作时，默认值就足够了。在 GHES 上运行时，如果您遇到速率限制，您可以为 github.com 传递个人访问令牌。
    token: # 可选，默认为 ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # 用于指定是否需要缓存。如果您想启用缓存，请设置为 true。
    cache: # 可选，默认为 true
    # 用于指定依赖文件的路径 - go.sum
    缓存依赖路径：#可选
    # Go 使用的目标架构。示例：x86、x64。将默认使用系统架构。
    架构：#可选
    # 上传时用于拆分大文件的块大小，以字节为单位
    上传块大小：#可选
